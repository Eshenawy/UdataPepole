version: 2.1
commands:
#aws s3 rm "s3://udapeople-${CIRCLE_WORKFLOW_ID:0:5}" --recursive
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.  
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
              aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
              aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here     
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS = 1
            if(( $SUCCESS==1 )); 
            then
            #  cd ~/project/backend
            #  npm install
            #  Add revert code here. You can find this in the Getting Started section.
              exit 1
            fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
            
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
            
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: run frontend frontend
          command: |
            cd frontend
            npm install
            npm run test
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: run test backend
          command: |
            cd backend
            npm install
            npm run test
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Scanning the frontend
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
 
  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Scanning the backend
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
            
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - restore_cache:
         keys: [infrastructure-deploy]
      - add_ssh_keys:
            fingerprints: 
              - "2c:23:16:05:7b:d4:ae:55:d7:7c:ad:93:bc:ad:d0:38" # You can get this ID in the section where you registered the SSH Key
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation create-stack \
                --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
                --template-body file://.circleci/files/backend.yml \
                --parameters ParameterKey=ID,ParameterValue=${CIRCLE_WORKFLOW_ID:0:7} \
                --tags Key=project,Value=udapeople \
                --region us-east-1    
              
              
      - run:
          name: Ensure front-end infrastructure exist
          command: |             
            aws cloudformation create-stack \
              --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7} \
              --template-body file://.circleci/files/frontend.yml \
              --parameters ParameterKey=ID,ParameterValue=${CIRCLE_WORKFLOW_ID:0:7} \
              --tags Key=project,Value=udapeople \
              --region us-east-1
      - run:
           command: |
                sleep 1m          
      - run: yum -y install tar gzip      
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            mkdir -p /tmp/workspace
            cd /tmp/workspace
            echo "[web]" > inventory.txt
            aws ec2 describe-instances --query "Reservations[*].Instances[*].[PublicDnsName]" \
              --filters "Name=tag:project,Values=udapeople" \
              --region us-east-1 \
              --output text >> /tmp/workspace/inventory.txt
      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - inventory.txt         
      - destroy-environment
      
  configure-infrastructure:
    docker:
      - image: cimg/python:3.11.0
    steps:
      - checkout
      - run: sudo apt-get update
      - run: sudo apt-get install --assume-yes awscli
      - restore_cache:
         keys: [infrastructure-configure]
      - add_ssh_keys:
            fingerprints: 
              - "2c:23:16:05:7b:d4:ae:55:d7:7c:ad:93:bc:ad:d0:38" # You can get this ID in the section where you registered the SSH Key
      - attach_workspace:
          at: /tmp/workspace   
      - run:
          name: Install dependencies
          command: |
              pip install --user ansible
      - run:
          name: Configure server
          command: |
              cat /tmp/workspace/inventory.txt
              cd .circleci/ansible
              ansible-playbook -i /tmp/workspace/inventory.txt configure-server.yml
      - destroy-environment
 
  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run: sudo apt-get update   
      - run: sudo apt-get install --assume-yes awscli
      - run:
          name: Setting environment vars
          command: | 
            echo ENVIRONMENT=production > "backend/.env"
            echo TYPEORM_CONNECTION=postgres >> "backend/.env"
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> "backend/.env"
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> "backend/.env"
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> "backend/.env"
            echo NODE_ENV=production >> "backend/.env"
            echo TYPEORM_HOST=udapeople.c7baqj0tign2.us-east-1.rds.amazonaws.com >> "backend/.env"
            echo TYPEORM_PORT=5432 >> "backend/.env"
            echo TYPEORM_USERNAME=udapeopleDB >> "backend/.env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/.env"
            echo TYPEORM_DATABASE=DBName >> "backend/.env"
            cat backend/.env
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run migrations > migrations_dump.txt
      - run:
          name: Send migration results to memstash
          command: |
            cat ~/project/backend/migrations_dump.txt
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              echo https://kvdb.io/$KVDB_ACCESS_KEY/migration_${CIRCLE_WORKFLOW_ID:0:7}
              echo "Test"
              curl https://kvdb.io/$KVDB_ACCESS_KEY/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
              echo "Test"
              echo $KVDB_ACCESS_KEY
              echo "Test"
              echo https://kvdb.io/$KVDB_ACCESS_KEY/migration_${CIRCLE_WORKFLOW_ID:0:7}
              echo "Test"
            fi
      - destroy-environment 
  deploy-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Install tar utility
          command: |
            sudo apt-get install -y tar gzip
      - run:
          name: Install dependencies
          command: |
              sudo apt-get update   
              sudo apt-get install --assume-yes awscli
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP==$(aws ec2 describe-instances --query "Reservations[*].Instances[*].[PublicIpAddress]" \
              --filters "Name=tag:project,Values=udapeople" \
              --region us-east-1)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
              cd frontend
              npm install
              npm run build
              tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
              aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive 
              
      - destroy-environment
    
    
  deploy-backend:
    docker:
      - image: cimg/python:3.11.0
    steps:
      - checkout
      - add_ssh_keys:
            fingerprints: 
              - "2c:23:16:05:7b:d4:ae:55:d7:7c:ad:93:bc:ad:d0:38" # You can get this ID in the section where you registered the SSH Key
      - attach_workspace:
         at: /tmp/workspace
      - run:
          name: Install ansible
          command: |
            pip install --user ansible
      - run:
          name: Deploy backend
          command: |   
            npm i
            npm run build
            cd ..
            # Zip the directory
            tar -C backend -czvf artifact.tar.gz .
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat /tmp/workspace/inventory.txt
            ansible-playbook -i /tmp/workspace/inventory.txt deploy-backend.yml
    
workflows:
  default:
    jobs:
      - deploy-backend
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [test-frontend]
      - scan-backend:
          requires: [test-backend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: master
      - configure-infrastructure:
          requires: [deploy-infrastructure] 
      - run-migrations:
          requires: [configure-infrastructure]    
      - deploy-frontend:
          requires: [run-migrations]    
